//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CreativeBox.Data.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KreativeBoxEntities : DbContext
    {
        public KreativeBoxEntities()
            : base("name=KreativeBoxEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAgent> tblAgents { get; set; }
        public virtual DbSet<tblRole> tblRoles { get; set; }
        public virtual DbSet<tblUniversity> tblUniversities { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblWareHouse> tblWareHouses { get; set; }
        public virtual DbSet<tblAddressSetting> tblAddressSettings { get; set; }
        public virtual DbSet<tblOrder> tblOrders { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
        public virtual DbSet<tblQuotation> tblQuotations { get; set; }
    
        public virtual ObjectResult<KB_SelectUser_Result> KB_SelectUser(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KB_SelectUser_Result>("KB_SelectUser", userIdParameter);
        }
    
        public virtual int UserOperation(Nullable<long> userId, string userName, string password, string firstName, string lastName, Nullable<System.DateTime> dOB, string email, string address, string phone, string userType, Nullable<int> roleTypeId, string userImage, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<bool> isDeleted, Nullable<bool> isActive, ObjectParameter returnCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var roleTypeIdParameter = roleTypeId.HasValue ?
                new ObjectParameter("RoleTypeId", roleTypeId) :
                new ObjectParameter("RoleTypeId", typeof(int));
    
            var userImageParameter = userImage != null ?
                new ObjectParameter("UserImage", userImage) :
                new ObjectParameter("UserImage", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserOperation", userIdParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, dOBParameter, emailParameter, addressParameter, phoneParameter, userTypeParameter, roleTypeIdParameter, userImageParameter, createdByParameter, updatedByParameter, isDeletedParameter, isActiveParameter, returnCode);
        }
    
        public virtual int AgentOperation(Nullable<long> agentId, string agentName, string address, string country, string state, string city, string website, string agentLogo, string email, string phone, string primaryPhone, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<bool> isDeleted, Nullable<bool> isActive, ObjectParameter returnCode)
        {
            var agentIdParameter = agentId.HasValue ?
                new ObjectParameter("AgentId", agentId) :
                new ObjectParameter("AgentId", typeof(long));
    
            var agentNameParameter = agentName != null ?
                new ObjectParameter("AgentName", agentName) :
                new ObjectParameter("AgentName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var agentLogoParameter = agentLogo != null ?
                new ObjectParameter("AgentLogo", agentLogo) :
                new ObjectParameter("AgentLogo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgentOperation", agentIdParameter, agentNameParameter, addressParameter, countryParameter, stateParameter, cityParameter, websiteParameter, agentLogoParameter, emailParameter, phoneParameter, primaryPhoneParameter, createdByParameter, updatedByParameter, isDeletedParameter, isActiveParameter, returnCode);
        }
    
        public virtual ObjectResult<KB_SelectAgent_Result> KB_SelectAgent(Nullable<long> agentId)
        {
            var agentIdParameter = agentId.HasValue ?
                new ObjectParameter("AgentId", agentId) :
                new ObjectParameter("AgentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KB_SelectAgent_Result>("KB_SelectAgent", agentIdParameter);
        }
    
        public virtual ObjectResult<KB_SelectUniversity_Result> KB_SelectUniversity(Nullable<long> universityId)
        {
            var universityIdParameter = universityId.HasValue ?
                new ObjectParameter("UniversityId", universityId) :
                new ObjectParameter("UniversityId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KB_SelectUniversity_Result>("KB_SelectUniversity", universityIdParameter);
        }
    
        public virtual int UniversityOperation(Nullable<long> universityId, string universityName, string address, string country, string state, string city, string universityLogo, string email, string phone, string primaryPhone, string secondaryPhone, string leadSource, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<bool> isDeleted, Nullable<bool> isActive, string contactPerson, ObjectParameter returnCode)
        {
            var universityIdParameter = universityId.HasValue ?
                new ObjectParameter("UniversityId", universityId) :
                new ObjectParameter("UniversityId", typeof(long));
    
            var universityNameParameter = universityName != null ?
                new ObjectParameter("UniversityName", universityName) :
                new ObjectParameter("UniversityName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var universityLogoParameter = universityLogo != null ?
                new ObjectParameter("UniversityLogo", universityLogo) :
                new ObjectParameter("UniversityLogo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var secondaryPhoneParameter = secondaryPhone != null ?
                new ObjectParameter("SecondaryPhone", secondaryPhone) :
                new ObjectParameter("SecondaryPhone", typeof(string));
    
            var leadSourceParameter = leadSource != null ?
                new ObjectParameter("LeadSource", leadSource) :
                new ObjectParameter("LeadSource", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UniversityOperation", universityIdParameter, universityNameParameter, addressParameter, countryParameter, stateParameter, cityParameter, universityLogoParameter, emailParameter, phoneParameter, primaryPhoneParameter, secondaryPhoneParameter, leadSourceParameter, createdByParameter, updatedByParameter, isDeletedParameter, isActiveParameter, contactPersonParameter, returnCode);
        }
    
        public virtual int UniversityDelete(Nullable<long> universityId, Nullable<int> updatedBy, ObjectParameter returnCode)
        {
            var universityIdParameter = universityId.HasValue ?
                new ObjectParameter("UniversityId", universityId) :
                new ObjectParameter("UniversityId", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UniversityDelete", universityIdParameter, updatedByParameter, returnCode);
        }
    
        public virtual int AgentDelete(Nullable<long> agentId, Nullable<int> updatedBy, ObjectParameter returnCode)
        {
            var agentIdParameter = agentId.HasValue ?
                new ObjectParameter("AgentId", agentId) :
                new ObjectParameter("AgentId", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgentDelete", agentIdParameter, updatedByParameter, returnCode);
        }
    
        public virtual ObjectResult<KB_SelectWareHouse_Result> KB_SelectWareHouse(Nullable<int> wareHouseId)
        {
            var wareHouseIdParameter = wareHouseId.HasValue ?
                new ObjectParameter("WareHouseId", wareHouseId) :
                new ObjectParameter("WareHouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KB_SelectWareHouse_Result>("KB_SelectWareHouse", wareHouseIdParameter);
        }
    
        public virtual int UserDelete(Nullable<long> userId, Nullable<int> updatedBy, ObjectParameter returnCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDelete", userIdParameter, updatedByParameter, returnCode);
        }
    
        public virtual int WareHouseDelete(Nullable<int> wareHouseId, Nullable<int> updatedBy, ObjectParameter returnCode)
        {
            var wareHouseIdParameter = wareHouseId.HasValue ?
                new ObjectParameter("WareHouseId", wareHouseId) :
                new ObjectParameter("WareHouseId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WareHouseDelete", wareHouseIdParameter, updatedByParameter, returnCode);
        }
    
        public virtual int WareHouseOperation(Nullable<int> wareHouseId, string wareHouseName, string address, string country, string state, string city, string phone, string primaryPhone, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<bool> isDeleted, Nullable<bool> isActive, ObjectParameter returnCode)
        {
            var wareHouseIdParameter = wareHouseId.HasValue ?
                new ObjectParameter("WareHouseId", wareHouseId) :
                new ObjectParameter("WareHouseId", typeof(int));
    
            var wareHouseNameParameter = wareHouseName != null ?
                new ObjectParameter("WareHouseName", wareHouseName) :
                new ObjectParameter("WareHouseName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WareHouseOperation", wareHouseIdParameter, wareHouseNameParameter, addressParameter, countryParameter, stateParameter, cityParameter, phoneParameter, primaryPhoneParameter, createdByParameter, updatedByParameter, isDeletedParameter, isActiveParameter, returnCode);
        }
    
        public virtual int KB_User_Change_Password(Nullable<long> userId, string password, string newPassword, ObjectParameter returnCode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KB_User_Change_Password", userIdParameter, passwordParameter, newPasswordParameter, returnCode);
        }
    
        public virtual ObjectResult<KB_User_Login_Result> KB_User_Login(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KB_User_Login_Result>("KB_User_Login", userNameParameter, passwordParameter);
        }
    
        public virtual int KB_AddressSetting_Delete(Nullable<long> addressId, Nullable<int> updatedBy, ObjectParameter returnCode)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KB_AddressSetting_Delete", addressIdParameter, updatedByParameter, returnCode);
        }
    
        public virtual int KB_AddressSetting_Insert_Update(Nullable<long> addressId, string company, string contactName, string country, string state, string city, string addressLine1, string addressLine2, string zipCode, string phone, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<bool> isDeleted, Nullable<bool> isActive, ObjectParameter returnCode)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(long));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KB_AddressSetting_Insert_Update", addressIdParameter, companyParameter, contactNameParameter, countryParameter, stateParameter, cityParameter, addressLine1Parameter, addressLine2Parameter, zipCodeParameter, phoneParameter, createdByParameter, updatedByParameter, isDeletedParameter, isActiveParameter, returnCode);
        }
    
        public virtual int KB_Order_Delete(Nullable<long> orderId, Nullable<int> updatedBy, ObjectParameter returnCode)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KB_Order_Delete", orderIdParameter, updatedByParameter, returnCode);
        }
    
        public virtual int KB_Order_Insert_Update(Nullable<long> orderId, Nullable<long> quotationId, string agentName, string productName, Nullable<int> quantity, Nullable<decimal> price, string productReference, string wareHouse, string productId, string deliverAddress, string contactPerson, string contactNo, string country, string state, string city, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<bool> isDeleted, Nullable<bool> isActive, ObjectParameter returnCode)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(long));
    
            var quotationIdParameter = quotationId.HasValue ?
                new ObjectParameter("QuotationId", quotationId) :
                new ObjectParameter("QuotationId", typeof(long));
    
            var agentNameParameter = agentName != null ?
                new ObjectParameter("AgentName", agentName) :
                new ObjectParameter("AgentName", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var productReferenceParameter = productReference != null ?
                new ObjectParameter("ProductReference", productReference) :
                new ObjectParameter("ProductReference", typeof(string));
    
            var wareHouseParameter = wareHouse != null ?
                new ObjectParameter("WareHouse", wareHouse) :
                new ObjectParameter("WareHouse", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var deliverAddressParameter = deliverAddress != null ?
                new ObjectParameter("DeliverAddress", deliverAddress) :
                new ObjectParameter("DeliverAddress", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KB_Order_Insert_Update", orderIdParameter, quotationIdParameter, agentNameParameter, productNameParameter, quantityParameter, priceParameter, productReferenceParameter, wareHouseParameter, productIdParameter, deliverAddressParameter, contactPersonParameter, contactNoParameter, countryParameter, stateParameter, cityParameter, createdByParameter, updatedByParameter, isDeletedParameter, isActiveParameter, returnCode);
        }
    
        public virtual int KB_Product_Delete(Nullable<long> productAutoId, Nullable<int> updatedBy, ObjectParameter returnCode)
        {
            var productAutoIdParameter = productAutoId.HasValue ?
                new ObjectParameter("ProductAutoId", productAutoId) :
                new ObjectParameter("ProductAutoId", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KB_Product_Delete", productAutoIdParameter, updatedByParameter, returnCode);
        }
    
        public virtual int KB_Product_Insert_Update(Nullable<long> productAutoId, string productName, string productId, string standardBPO, Nullable<int> quantity, string wareHouseName, string address, string country, string state, string city, string department, string hsCode, string weight, Nullable<decimal> price, string displayOrder, string productReference, Nullable<decimal> unitPrice, string currency, string productImage, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<bool> isDeleted, Nullable<bool> isActive, ObjectParameter returnCode)
        {
            var productAutoIdParameter = productAutoId.HasValue ?
                new ObjectParameter("ProductAutoId", productAutoId) :
                new ObjectParameter("ProductAutoId", typeof(long));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var standardBPOParameter = standardBPO != null ?
                new ObjectParameter("StandardBPO", standardBPO) :
                new ObjectParameter("StandardBPO", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var wareHouseNameParameter = wareHouseName != null ?
                new ObjectParameter("WareHouseName", wareHouseName) :
                new ObjectParameter("WareHouseName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var hsCodeParameter = hsCode != null ?
                new ObjectParameter("HsCode", hsCode) :
                new ObjectParameter("HsCode", typeof(string));
    
            var weightParameter = weight != null ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var displayOrderParameter = displayOrder != null ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(string));
    
            var productReferenceParameter = productReference != null ?
                new ObjectParameter("ProductReference", productReference) :
                new ObjectParameter("ProductReference", typeof(string));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var productImageParameter = productImage != null ?
                new ObjectParameter("ProductImage", productImage) :
                new ObjectParameter("ProductImage", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KB_Product_Insert_Update", productAutoIdParameter, productNameParameter, productIdParameter, standardBPOParameter, quantityParameter, wareHouseNameParameter, addressParameter, countryParameter, stateParameter, cityParameter, departmentParameter, hsCodeParameter, weightParameter, priceParameter, displayOrderParameter, productReferenceParameter, unitPriceParameter, currencyParameter, productImageParameter, createdByParameter, updatedByParameter, isDeletedParameter, isActiveParameter, returnCode);
        }
    
        public virtual int KB_Quotation_Delete(Nullable<long> quotationId, Nullable<int> updatedBy, ObjectParameter returnCode)
        {
            var quotationIdParameter = quotationId.HasValue ?
                new ObjectParameter("QuotationId", quotationId) :
                new ObjectParameter("QuotationId", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KB_Quotation_Delete", quotationIdParameter, updatedByParameter, returnCode);
        }
    
        public virtual int KB_Quotation_Insert_Update(Nullable<long> quotationId, string orderId, string productName, string variation, string productReference, string process, string quotationType, string proofingMethod, string specification, string comments, Nullable<int> quantity, string invoiceRecipient, string status, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<bool> isDeleted, Nullable<bool> isActive, ObjectParameter returnCode)
        {
            var quotationIdParameter = quotationId.HasValue ?
                new ObjectParameter("QuotationId", quotationId) :
                new ObjectParameter("QuotationId", typeof(long));
    
            var orderIdParameter = orderId != null ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var variationParameter = variation != null ?
                new ObjectParameter("Variation", variation) :
                new ObjectParameter("Variation", typeof(string));
    
            var productReferenceParameter = productReference != null ?
                new ObjectParameter("ProductReference", productReference) :
                new ObjectParameter("ProductReference", typeof(string));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var quotationTypeParameter = quotationType != null ?
                new ObjectParameter("QuotationType", quotationType) :
                new ObjectParameter("QuotationType", typeof(string));
    
            var proofingMethodParameter = proofingMethod != null ?
                new ObjectParameter("ProofingMethod", proofingMethod) :
                new ObjectParameter("ProofingMethod", typeof(string));
    
            var specificationParameter = specification != null ?
                new ObjectParameter("Specification", specification) :
                new ObjectParameter("Specification", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var invoiceRecipientParameter = invoiceRecipient != null ?
                new ObjectParameter("InvoiceRecipient", invoiceRecipient) :
                new ObjectParameter("InvoiceRecipient", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KB_Quotation_Insert_Update", quotationIdParameter, orderIdParameter, productNameParameter, variationParameter, productReferenceParameter, processParameter, quotationTypeParameter, proofingMethodParameter, specificationParameter, commentsParameter, quantityParameter, invoiceRecipientParameter, statusParameter, createdByParameter, updatedByParameter, isDeletedParameter, isActiveParameter, returnCode);
        }
    
        public virtual ObjectResult<KB_SelectAddressSetting_Result> KB_SelectAddressSetting(Nullable<long> addressId)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KB_SelectAddressSetting_Result>("KB_SelectAddressSetting", addressIdParameter);
        }
    
        public virtual ObjectResult<KB_SelectOrder_Result> KB_SelectOrder(Nullable<long> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KB_SelectOrder_Result>("KB_SelectOrder", orderIdParameter);
        }
    
        public virtual ObjectResult<KB_SelectProduct_Result> KB_SelectProduct(Nullable<long> productAutoId)
        {
            var productAutoIdParameter = productAutoId.HasValue ?
                new ObjectParameter("ProductAutoId", productAutoId) :
                new ObjectParameter("ProductAutoId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KB_SelectProduct_Result>("KB_SelectProduct", productAutoIdParameter);
        }
    
        public virtual ObjectResult<KB_SelectQuotation_Result> KB_SelectQuotation(Nullable<long> quotationId)
        {
            var quotationIdParameter = quotationId.HasValue ?
                new ObjectParameter("QuotationId", quotationId) :
                new ObjectParameter("QuotationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KB_SelectQuotation_Result>("KB_SelectQuotation", quotationIdParameter);
        }
    
        public virtual ObjectResult<KB_OrderReportByQuantity_Result> KB_OrderReportByQuantity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KB_OrderReportByQuantity_Result>("KB_OrderReportByQuantity");
        }
    }
}
